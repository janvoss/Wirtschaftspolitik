# Begriffe, Verhältnisse und Bereiche

## Begriffe 

```{python}
#| warning: false
# Wirtschaftsolitik und Wirtschaftspsychologie

from graphviz import Digraph
from IPython.display import display

dot = Digraph()

# Layout
dot.attr(rankdir='LR',
         nodesep='3,5')

# Cluster Wirtschaftspolitik
with dot.subgraph(name='cluster_wirtschaftspolitik') as c:
    c.attr(label='Wirtschaftspolitik',
           fontname="times-bold", 
           style='filled,rounded',
           fillcolor='#0000ff33',
           color='#0000ff',
           penwidth='1.5',
           radius='10')
    c.node('a', 'Aktivitäten des Staates,\l' 
                'mit denen die Wirtschaftsordnung\l'
                'sowie wirtschaftliche Abläufe und Strukturen\l'
                'beeinflusst und gestaltet werden\l', 
                shape='none',
                width='3.2',  # Manuelle Größenanpassung
                height='1.5') 

# Cluster Wirtschaftspsychologie
with dot.subgraph(name='cluster_wirtschaftspsychologie') as c:
    c.attr(label='Wirtschaftspsychologie',
           fontname="times-bold",
           style='filled,rounded',
           fillcolor='#ff000033',
           color='#ff0000',
           penwidth='1.5',
           radius='10')
    c.node('b', 'Erleben und Verhalten\l'
                'des Menschen\l'
                'beim wirtschaftlichen Handeln\l', 
                shape='none',
                width='3.2',  # Gleiche Breite wie Cluster A
                height='1.5') # Gleiche Höhe wie Cluster A

# Kanten
dot.edge('a','b', style='invis')

# Ausgabe
display(dot)
```
## Verhältnisse 

```{python}

# Wirtschaftsolitik und Wirtschaftspsychologie

from graphviz import Digraph
from IPython.display import display

dot = Digraph()

# Layout
dot.attr(rankdir='LR',
         nodesep='1,5')

# Knoten
dot.node('a', 'Wirtschaftspolitik',
           shape='box', 
           style='filled,rounded',
           fillcolor='#0000ff33',
           color='#0000ff',
           penwidth='1.5',
           radius='10')
dot.node('c', 'Wirtschaftspsychologie',
            shape= 'box',
          style='filled,rounded',
           fillcolor='#ff000033',
           color='#ff0000',
           penwidth='1.5',
           radius='10')

# Kanten
#dot.edge('a', 'c', constraint= 'false', style='invis')
dot.edge('a', 'c', constraint= 'false', label='benötigt')

dot.node('b', 'und', shape='none', fontcolor='grey') # muss offenbar hier eingefügt werden für Verlauf der Pfeile

# dot.edge('a', 'c', style= 'invis')
dot.edge('a', 'b', style= 'invis')
dot.edge('b', 'c', style= 'invis')
#dot.edge('c', 'a', constraint= 'false', style='invis')
dot.edge('c', 'a', constraint= 'false', label='motiviert')
dot.edge('c', 'a', constraint= 'false', label='erklärt', style='dashed', fontcolor='grey')

# Display
display(dot)

```

## Bereiche 

### Wirtschaftspolitik

```{python}
#| warning: false
from graphviz import Digraph
from IPython.display import display

dot = Digraph()
dot.attr('node', width='2', shape='none', labeljust='c')
#dot.attr(nodesep='.7')
dot.attr(label='Bereiche der Wirtschaftspolitik', labelloc='t',
          fontname="times-bold", fontsize="24", ranksep=".5")

# Konfiguration der Hauptknoten und Subnodes
main_nodes = {
    'A': ['Allokation', ['Marktversagen\\l',
                         'Wettbewerbspolitik\\l',
                         'Ordnungspolitik\l',
                         #'\\l'
                         'Industriepolitik\\l']],
    'B': ['Distribution', ['Soziale Sicherung\l',
                           'Steuererhebung\l',
                           'Öffentliche\l Bereitstellung\l von Gütern\l']],
    'C': ['Stabilisierung', ['Automatische\l Stabilisatoren\l',
                             'Antizyklische\l Fiskalpolitik\l',
                             '(Geldpolitik)\l']]
}

# Hauptknoten erstellen
for key in main_nodes:
    dot.node(key, main_nodes[key][0], shape='underline')

# Subnodes generieren und verbinden
max_subnodes = max(len(sub) for _, (_, sub) in main_nodes.items())

for i in range(max_subnodes):
    current_nodes = []

    for key, (label, subnodes) in main_nodes.items():
        if i < len(subnodes):
            node_id = f'{key}{i+1}'
            dot.node(node_id, subnodes[i])
            current_nodes.append(node_id)

            # Vertikale unsichtbare Verbindungen
            if i == 0:
                dot.edge(key, node_id, style='invis')
            else:
                prev_node = f'{key}{i}'
                dot.edge(prev_node, node_id, style='invis')

    # Horizontale Ausrichtung der Subnodes
    if current_nodes:
        with dot.subgraph() as s:
            s.attr(rank='same')
            for node in current_nodes:
                s.node(node)

display(dot)
```

### Wirtschaftspsychologie

```{python}
#| warning: false


from graphviz import Digraph
from IPython.display import display

dot = Digraph()
dot.attr('node', width='2.5', shape='none', labeljust='c')
dot.attr(nodesep='.7')
dot.attr(label='Wirtschaftspsychologische Themen mit Bezug zur Wirtschaftspolitik', labelloc='t',
          fontname="times-bold", fontsize="24")

# Konfiguration der Hauptknoten und Subnodes

main_nodes = {
    'A': ['Verbraucherschutz', [
        'Unterstützung informierter\l'
        'Entscheidungen\l',
        'Berücksichtigung von\l'
        'möglicher Irrationalität\l',
        'Explizite Berücksichtigung\l'
        'differenzierter Konsummotive\l'
    ]],
    'B': ['Umweltschutz', [
        'Erklärung von Konsumverhalten\l',
        'psychologische Ansatzpunkte\l'
        'für Verhaltensänderungen\l',
        'Ergänzung herkömmlicher\l'
        'umweltpolitischer Maßnahmen\l'
    ]],
    'C': ['Demokratiebeteiligung', [
        'Geringe Rationalitätsanreize\\l',
        'Warum wählen? (Expressive vs.\l'
        'instrumentelle Motive)\l'
    ]],
    'D': ['Vertrauen', [
        'Institutionenvertrauen in\l'
        '(Wirtschafts-)Krisen\l',
        '(Steuer-)Ehrlichkeit\\l',
        'Gerechtigkeitsvorstellungen\l'
    ]]
}

# Hauptknoten erstellen
for key in main_nodes:
    dot.node(key, main_nodes[key][0], shape='underline')

# Subnodes generieren und verbinden
max_subnodes = max(len(sub) for _, (_, sub) in main_nodes.items())

for i in range(max_subnodes):
    current_nodes = []

    for key, (label, subnodes) in main_nodes.items():
        if i < len(subnodes):
            node_id = f'{key}{i+1}'
            dot.node(node_id, subnodes[i])
            current_nodes.append(node_id)

            # Vertikale unsichtbare Verbindungen
            if i == 0:
                dot.edge(key, node_id, style='invis')
            else:
                prev_node = f'{key}{i}'
                dot.edge(prev_node, node_id, style='invis')

    # Horizontale Ausrichtung der Subnodes
    if current_nodes:
        with dot.subgraph() as s:
            s.attr(rank='same')
            for node in current_nodes:
                s.node(node)

display(dot)
```